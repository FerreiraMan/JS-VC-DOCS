openapi: 3.0.3
info:
  title: 'VC - Global Product Management API'
  version: 'latest'
  x-logo:
    url: /images/Jumia-Logo.png
    backgroundColor: '#FFFFFF'
    altText: Jumia logo
  description:
    $ref: /text-files/version-control-&-intro.md
  contact:
    name: Pedro Ferreira
    email: pedro.sferreira@jumia.com
    url: 'https://development.gigantic-server.com'
  license:
    name: 'https://development.gigantic-server.com'
    url: 'https://development.gigantic-server.com'
servers:
  - url: 'https://vendor-api-staging.jumia.com'
tags:
  - name: Before starting
    description: |-
        On Vendor Center, the only available option to integrate is using an approach based in OAuth2. 
        
        Vendor Center's main goal is to provide a centralized place to manage your catalog and orders from all countries.
        In practice, you will be able to manage all your orders within your Mastershop, even from different countries, in the same request. 

        While there are no limits in Seller Center regarding orders processing, Vendor Center will have it.
        This rate limit is going to be applied at Mastershop level.
        In a first stage, the limits will be 200 requests/minute with a limit of 4 requests / second.
  - name: Step-by-Step Authentication
    description: 
      $ref: /text-files/step-by-step-auth-description.md
  - name: Shops
  - name: Product Information
  - name: Catalog
x-tagGroups:
  - name: Authentication
    tags:
      - Before starting
      - Step-by-Step Authentication
      - Endpoints
  - name: API Endpoints
    tags:
      - Shops
      - Product Information
      - Catalog
paths:
  /shops:
    $ref: './paths/shops.yaml'
  /shops-of-master-shop:
    $ref: './paths/shops-of-master-shop.yaml'
  /catalog/brands:
    $ref: './paths/catalog@brands.yaml'
  /catalog/categories:
    $ref: './paths/catalog@categories.yaml'
  /catalog/products:
    $ref: './paths/catalog@products.yaml'
  /catalog/attribute-sets/{id}:
    $ref: './paths/catalog@attribute-sets@{id}.yaml'
  /feeds/{id}:
    $ref: './paths/feeds@{id}.yaml'
  /feeds/products/stock:
    $ref: './paths/feeds@products@stock.yaml'
  /feeds/products/price:
    $ref: './paths/feeds@products@price.yaml'
  /feeds/products/status:
    $ref: './paths/feeds@products@status.yaml'
  /feeds/products/create:
    $ref: './paths/feeds@products@create.yaml'
  /feeds/products/update:
    $ref: './paths/feeds@products@update.yaml'
  /consignment-order:
    $ref: './paths/consignment-order.yaml'
  /consignment-order/{purchaseOrderNumber}:
    $ref: './paths/consignment-order@{purchaseOrderNumber}.yaml'
  /consignment-stock:
    $ref: './paths/consignment-stock.yaml'
  /catalog/stock:
    $ref: './paths/catalog@stock.yaml'
  /login:
    $ref: './paths/login.yaml'                   
  /Application Redirect URI:
    $ref: './paths/application-redirect-uri.yaml'                   
  /token:
    $ref: './paths/token.yaml'
components:
  $ref: './components/shops-body.yaml'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 
      description: |- 
        JWT Token generated by Keycloak and Application ID. 
        JWT is a short lifetime token that can be assigned a specific expiration time.
        
        Usage format: `Bearer <JWT>`.
security:
  - bearerAuth: []    